import * as React from 'react';
import { styled, createTheme, ThemeProvider } from '@mui/system';

interface <%= props.pascalCaseName %>Props {
  color?: 'primary' | 'secondary';
  variant?: 'normal' | 'dashed';
}

const <%= props.camelCaseName %>ComponentTheme = createTheme({
  components: {
    <%= props.pascalCaseName %>: {
      styleOverrides: {
        root: { color: 'darkslategray' },
        primary: { color: 'darkblue' },
        secondary: { color: 'darkred', backgroundColor: 'pink' },
      },
      variants: [
      { props: { variant: 'dashed', color: 'primary' }, style: { border: '1px dashed darkblue' }, },
      { props: { variant: 'dashed', color: 'secondary' }, style: { border: '1px dashed darkred' }, },
      ],
    },
  },
});

const <%= props.pascalCaseName %> = styled('div', {
  // Configure which props should be forwarded on DOM
  shouldForwardProp: (prop) => prop !== 'color' && prop !== 'variant' && prop !== 'sx',
  name: '<%= props.pascalCaseName %>',
  slot: 'Root',
  // We are specifying here how the styleOverrides are being applied based on props
  overridesResolver: (props, styles) => [
  styles.root,
  props.color === 'primary' && styles.primary,
  props.color === 'secondary' && styles.secondary,
  ],
})<<%= props.pascalCaseName %>Props>(({ theme }) => ({
  backgroundColor: 'aliceblue',
  padding: theme.spacing(1),
}));

const <%= props.pascalCaseName %>Component = () => {
  return (
    <ThemeProvider theme={<%=props.camelCaseName %>ComponentTheme}>
      <<%= props.pascalCaseName %> sx={{ m: 1 }} color="primary" variant="dashed">
        Primary
      </<%= props.pascalCaseName %>>
    </ThemeProvider>
  );
}

export default <%= props.pascalCaseName %>Component;